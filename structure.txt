PHP Headless CMS - Complete Project Structure
Technology Stack
https://phpheadless.com
Author : Qasim Hussain 

Backend: PHP 8.2+, Medoo ORM, qaxim/php-router
Frontend: Pure PHP with Tailwind CSS, Alpine.js
Database: MySQL with JSON fields for flexible content

Directory Structure
php-headless-cms/
├── app/
│   ├── Core/
│   │   ├── Application.php          # Main app class, router setup, SimpleRouter fallback
│   │   ├── Config.php               # Config management (app.*, database.*)
│   │   └── Database.php             # Medoo wrapper, connection, migrations
│   ├── Controllers/
│   │   ├── Admin/
│   │   │   ├── DashboardController.php      # Admin dashboard with stats
│   │   │   ├── ContentTypeController.php    # CRUD for content types, field builder
│   │   │   └── ContentController.php        # CRUD for content entries, dynamic forms
│   │   └── Install/
│   │       └── InstallController.php        # 4-step installer (requirements, DB, admin, complete)
│   ├── Models/              # [Future: Model classes]
│   ├── Services/           # [Future: Business logic]
│   ├── Middleware/         # [Future: Auth, CORS]
│   ├── Helpers/
│   │   └── Response.php    # JSON responses, views, redirects, CORS
│   └── Views/
│       ├── admin/
│       │   ├── layout.php                   # Admin panel layout (sidebar, header)
│       │   ├── dashboard.php                # Dashboard with stats, quick actions
│       │   ├── content-types/
│       │   │   ├── index.php               # Content types list with stats
│       │   │   └── create.php              # Drag-drop field builder with Alpine.js
│       │   └── content/
│       │       ├── index.php               # Content list with filtering, pagination
│       │       ├── create.php              # Dynamic form generator
│       │       └── select-type.php         # Content type selection
│       └── install/
│           ├── layout.php                   # Install layout with progress steps
│           ├── requirements.php             # PHP version, extensions check
│           ├── database.php                 # DB connection with test feature
│           ├── admin.php                    # Admin user creation
│           └── completion.php               # Success page with next steps
├── config/
│   ├── app.php             # App settings, upload config, cache
│   ├── database.php        # Medoo connection config
│   └── routes.php          # All routes (admin, API, install)
├── storage/
│   ├── uploads/            # File uploads
│   ├── cache/              # Cache files
│   ├── logs/               # Debug logs
│   └── installed.lock      # Installation marker
├── public/
│   ├── index.php           # Entry point, autoloader, env loader
│   ├── .htaccess           # URL rewriting
│   └── assets/             # Static assets
├── vendor/                 # Composer dependencies
├── .env                    # Environment variables (created by installer)
├── .env.example            # Environment template
└── composer.json           # Dependencies: medoo, qaxim/php-router
Database Schema
sql-- Core tables created by installer
users                # id, username, email, password, role, status, timestamps
content_types        # id, name, slug, description, fields(JSON), settings(JSON), timestamps  
content_entries      # id, content_type_id, data(JSON), status, created_by, timestamps
media               # id, filename, original_name, mime_type, size, path, alt_text, uploaded_by, created_at
settings            # id, key, value, type, updated_at
Key Features Implemented
1. Installation System (/install)

Step 1: Requirements check (PHP, extensions, permissions)
Step 2: Database setup with connection testing
Step 3: Admin user creation with password validation
Step 4: Completion with security recommendations

2. Admin Panel (/admin)

Dashboard: Stats, quick actions, system info
Content Types: Visual field builder (text, textarea, rich_text, number, date, boolean, select, media)
Content Management: Dynamic forms, draft/publish, filtering, pagination
Responsive Design: Tailwind CSS with Alpine.js interactions

3. Content Type Builder

Field Types: 11 field types with validation settings
Drag-Drop Interface: Add/remove/configure fields
Auto-Generated APIs: /api/{slug} endpoints
JSON Schema Storage: Flexible field definitions

4. Content Entry System

Dynamic Forms: Generated from content type fields
Field Validation: Required, max length, email, URL, number ranges
Status Management: Draft/Published states
Bulk Operations: Delete, filter, search

Current Routes
php// Installation
GET  /install                    # Requirements/DB/Admin setup
POST /install                    # Process installation steps
POST /install/test-connection    # AJAX DB connection test

// Admin Panel  
GET  /admin                      # Dashboard
GET  /admin/content-types        # List content types
GET  /admin/content-types/create # Field builder
POST /admin/content-types        # Create content type
GET  /admin/content              # List content entries
GET  /admin/content/create       # Content form
POST /admin/content              # Create content entry

// API (Future)
GET  /api/{content-type}         # List entries
GET  /api/{content-type}/{id}    # Single entry
POST /api/{content-type}         # Create entry
PUT  /api/{content-type}/{id}    # Update entry
DELETE /api/{content-type}/{id}  # Delete entry
Next Steps to Complete

API Endpoints: RESTful API with filtering, pagination, authentication
Media Management: File upload system with thumbnails
User Management: Role-based permissions, API keys
Settings Panel: Site configuration, API settings
Authentication: JWT tokens, login/logout system
Content Relations: Link content types together
Plugin System: Extensible architecture
API Documentation: Auto-generated docs with examples

Installation Commands
bash# Setup
composer install
cp .env.example .env
chmod 755 storage/ public/uploads/

# Visit /install in browser
# Complete 4-step installation process
# Default admin: admin/admin (changeable during install)
Key Technologies

Router: qaxim/php-router with SimpleRouter fallback
ORM: Medoo for database operations
Frontend: Tailwind CSS + Alpine.js (no build process)
Auth: Session-based (JWT planned)
Validation: Server-side PHP validation
File Structure: PSR-4 autoloading, MVC pattern